# デスクトップ環境のインストール

前章までで必要最低限のパッケージのインストールをインストールしました。
まず、Wi-fi接続をしていきましょう。NetworkManagerには@<b>{nmcli}というCLIでWi-Fi設定ができるツールが付属しています。
以下のコマンドで近くのWi-Fiネットワークを一覧表示します。

//cmd{
$ nmcli device wifi list
//}

つなぎたいWi-Fiネットワークが見つかったら以下のコマンドで接続します。
@<i>{SSID}と@<i>{password}は各ネットワークのものに置き換えてください。

//cmd{
$ nmcli device wifi connect @<i>{SSID} password @<i>{password}
//}

ここまでできたらネットワーク接続を確認してみます。

//cmd{
$ ping www.archlinux.jp
//}

この用に設定したWi-fiネットワークは保存され、次再起動した際に自動的につながるようになります。
尚有線が使える環境ならケーブルを指すだけでネットワークに繋がります。

インターネットへの接続を確認したらデスクトップ環境をインストールしていきましょう。
デスクトップ環境は様々な種類がありますが、今回は個人的に好きなKDEをインストールしていきます。

== そもそもデスクトップ環境とは何か

私たちが今まで触ってきた黒い画面にコマンドを打って操作をするUIをCLI(Command Line Interface)といいます。
Linux向けのデスクトップ環境は様々な種類があり、それぞれに特徴があります。
例えば、Ubuntu DesktopはGnomeというデスクトップ環境を採用しています。
余談ですが、Ubuntuには公式フレーバーとしてデスクトップ環境を変えたバージョンのUbuntuが複数配布されています
(KDEを採用したKubuntu、Xfceを採用したXubuntu、LXQtを採用したLubuntuなど)。

今回はKDEというデスクトップ環境をインストールしてArch Laptopを完成させていきましょう。

== インストール

インストールはとても簡単です。pacmanでplasmaパッケージグループをインストールしていきます。


//cmd{
$ sudo pacman -S plasma
//}

パッケージグループとは関連パッケージをまとめたものでグループの中から必要なパッケージを選んでまとめてインストールできるものです。
このコマンドを使うと多くのパッケージの名前が列挙されます。今回は全てインストールするためデフォルトのallで問題ありません。
因みにデスクトップ環境は最低限plasma-desktopをインストールすれば動きます。しかし、ネットワーク設定、サウンド設定など欲しい機能が何もない形だけのGUI環境が出来上がり、どの部分になんのパッケージが必要なのかが分かりにくい(自分の不勉強ですが…)ので
パッケージグループでまとめて入れてしまいます。

qt6-multimedia-backendは1、jackはを選びます。ttf-fontは好みなのですが、noto-fontsを選びます。
また、emoji-fontも1を選択します。

Proceed with installation?と出たらYを入力してインストールを始めましょう。2GiBのインストールが始まるためネットワーク環境によっては時間がかかります。
気長に待ちましょう。

インストールができたらディスプレイマネージャのSDDMをインストールしていきます。
ディスプレイマネージャとはGUIのログイン画面を表示してデスクトップ環境を起動するプログラムです。
これ、始めは衝撃だったのですが、ログイン画面とログイン後のデスクトップ環境は独立しています。それぞれ色々な種類があるので自分の好みに合わせて組み合わせて使うことができます。

Plasmaが推奨しており、KDEで設定ができるSDDMを採用します。

//emlist[SDDMのインストール]{
$ sudo pacman -S sddm
//}

SDDMのサービスを有効化します。

//emlist[起動時SDDMを自動で有効化するよう設定]{
$ sudo systemctl enable sddm
//}

ここまで設定したら再起動をすれば、デスクトップ環境の導入完了です。
思ったより簡単だったのではないでしょうか

なおVirtualBoxを使っている方はvirtualbox-guest-utilsをインストールしておきます。
ゲストOS向けにドライバやアプリが最適化されます。

//cmd{
$ sudo pacman -S virtualbox-gurst-utils
//}

== 端末エミュレータのインストール

無事にデスクトップ環境に入れましたでしょうか。

//indepimage[start-kde][Plasmaデスクトップへようこそ]

このWindowsライクな非常にわかりやすいUIがKDEの魅力です。

次に端末エミュレータをインストールしていきます。
macOSやUbuntuでいうterminalアプリのようなものですね。
GUI環境でCLIをエミュレートするアプリです。
Arch Linuxで使うアプリはできるだけpacmanで管理をしたいので
これからもCLI環境を多く使います。
しかし、plasmaパッケージグループには端末エミュレータが含まれていないため、
自分でインストールする必要があります。

今回インストールするのは@<b>{Yakuake}という端末エミュレータです。
Yakuakeはトップダウン型のターミナルで好きなときに指定したキーを押すとこのようにターミナルが垂れ下がるように開くことができる、とても便利な端末エミュレータです。
早速インストールしていきましょう。端末を開いてください。

…@<b>{その端末がないじゃないですか}

安心してください。@<b>{仮想コンソール}を開きます。

=== 仮想コンソール

GUI環境であってもコンソール(CLI)を開くことができます。
ctrl+alt+F3を押してください。
するとCLIが開きます。
インストール直後のログインのようにユーザ名とパスワードを入力すると
コンソールに入ることができました。

//indepimage[virtualconsole][仮想コンソール]

Linuxには仮想コンソールが複数用意されています。(tty1~tty6)
どの仮想コンソールに入っているかは@<b>{tty}コマンドで確認できます。
//cmd{
$ tty
//}

KDEの場合、tty1とtty2がplasmaとsddmに使われているので他に使うことができる仮想コンソールはtty3~6です。
今回はtty3に入っていると思います。

仮想コンソールが主に役立つときは緊急時の復旧対応だと思います。
これから負荷の高い使い方をしていくと、メモリ不足などでパソコンがフリーズすることがあるでしょう。
そのときは仮想コンソールに入ることを試してみてください。CLIからrebootしたり、問題のあるプロセスをkillしたりできます。

さて、仮想コンソールに入ったのでpacmanでYakuakemをインストールしましょう。

//cmd{
$ sudo pacman -S yakuake
//}

インストールが完了したら元のデスクトップ環境に戻りましょう。
Ctrl+Alt+F1で元のデスクトップ画面に戻ることができます。

デスクトップ環境に戻ったらYakuakeを実行してみましょう。左下のメニューでYakuakeと検索すると出てくると思います。
初めて開くときにYakuakeを呼び出すときに使うキーを指定します。初期設定はF12ですが、F12キーを別のアプリでよく用いる人は変える必要があるでしょう。
一度開くと指定したキーでYakuakeが自由に呼び出せるようになります。とても便利ですね。

//indepimage[yakuake][Yakuake いつでも端末を呼び出せる]

=== 自動起動設定

Yakuakeは裏で動かしておいて、必要に応じて開けるようにしておきたいです。
そのためには再起動時Yakuakeを都度起動する必要があります。
Yakuakeをパソコンの起動時自動で起動してくれるように設定しておきましょう。

KDEシステム設定を開きます。
Systemの欄にAutostartというメニューがあります。
右上の追加を押してYakuakeを選びます。

//indepimage[Autostart][自動起動設定]

この用に設定をしておくとYakuakeが再起動時自動で呼ばれる用になります。

== KDE Applicationsについて

KDE ApplicationsはKDEによって開発が進められているplasma上で動かすことができるアプリ郡です。
KDE Applicationsは100以上のアプリケーションによって構成されており、エクスプローラや端末エミュレータのような必須級のアプリから麻雀、マインスイーパーのようなゲームまで多種多様なアプリが用意されています。
尚、YakuakeはKDE Applicationsというアプリ郡の中の一つです。

KDE Applicationsから必須級のアプリを3つ入れていきます。ファイルエクスプローラである@<b>{Dolphin}をダウンロードしておきましょう。

//cmd{
$ sudo pacman -S dolphin
//}

インストールするとWindowsのエクスプローラのようなアイコンが追加された事がわかります。

また、圧縮ファイルの作成、解凍を行うアーカイブマネージャである@<b>{Ark}をインストールしましょう。

//cmd{
$ sudo pacman -S ark
//}

最後にスクリーンショットを行うためのアプリ、Spectacleをインストールします。

//cmd{
$ sudo pacman -S spectacle
//}

インストールが終わったらPrintScreenキーを押してみてください。
Spectacleが開くようになっているはずです。

//indepimage[spectacle][Spectacle スクショを取れる]

開かない場合は手動で開いて設定を確認してください。

## 日本語環境のインストール

現在は日本語が入力できない環境にあります。また、日本語フォントが入っていないため、日本語がうまく表示されない状態でしょう。
まず、日本語フォントをインストールしていきます。とりあえずGoogleのNotoCJKフォントをインストールしていきます。

//cmd{
$ sudo pacman -S noto-fonts-cjk
//}

インストールが終わったら日本語が上手く表示される様になるはずです。
この状態になったらシステム設定の「Region & Language」から言語を「日本語」に変えましょう。

//indepimage[Region&Language][言語設定]

再起動すると言語が日本語に変更されます。フォントに違和感があるかもしれませんが、公式レポジトリ、また後述のAURを含めると様々な日本語フォントが用意されています。
システムのフォントもその中から選ぶことができるため、後に好きなように変更をしましょう。

さて、日本語入力環境のため、インプットメソッドフレームワークである@<b>{Fcitx5}をインストールしていきます。

=== Fcitx5のインストール

Fcitx5をインストールしましょう。この際、Google日本語入力から派生したOSSである@<b>{mozc}を一緒にインストールします。

//cmd{
$ sudo pacman -S fcitx5-mozc
//}

インストールしたらメニューを開きましょう。キーボード>仮想キーボードメニューを開きます。

//indepimage[keyboardsetting][仮想キーボードを設定]

ここでFcitx5を選び、適用を選択しましょう。Fcitx5が使えるようになりました。
jp配列を使っている人はキーボード>キーボード>レイアウトと進め、レイアウトを設定に日本語レイアウトを追加してください。(再起動するとリセットされます…)

//indepimage[keyboardLayout][キーボードレイアウトを設定]

ctrl+spaceを押すと入力メソッドが切り替わります。
試しに端末エミュレータに日本語を打ってみてください。
無事に打てたら成功です。尚、キーボードがjp配列なら半角/全角キーでenとjpを切り分けられます。

== AURヘルパーのインストール

Arch Linuxには公式リポジトリの他にArch User Repository(以下 AUR)と呼ばれる非公式リポジトリがあります。
この非公式リポジトリにはGoogle ChromeやVisual Studio CodeのようなプロプライエタリなソフトウェアはAURで配布されています。
AURにあるパッケージをインストールするにはそのパッケージのgitリポジトリをクローンして手元でビルドしてからpacmanでインストール、
という簡略化されているとはいえ面倒な手順を踏む必要があります。これらを自動化し、pacmanと同様にAURのパッケージをインストールできるようにしたソフトがAURヘルパーです。
今回はその中でもparuというAURヘルパーを導入します。
paru自体がAURのパッケージとして配布されているため、ちゃんと手順を踏んでビルドしていきます。

まず、必要な開発パッケージをインストールします。

//cmd{
$ sudo pacman -S base-devel
//}

AURのパッケージはbase-develがある前提でビルド手順が組まれているため、必ずインストールしましょう。
gitパッケージをインストールします。

//cmd{
$ sudo pacman -S git
//}
paruのgitリポジトリをクローンします。

//cmd{
$ git clone https://aur.archlinux.org/paru.git
//}

ビルドしてインストールをします。

//cmd{
$ cd paru
$ makepkg -si
//}
選択肢はデフォルトで構いません。
ビルドには時間がかかるので気長に待ちましょう。

ビルドが無事完了したら動作確認をしてみましょう。

//cmd{
$ paru -V
//}

バージョン番号が表示されたらインストール完了です。

## AURパッケージをインストールしてみよう

paruを実際に使ってみましょう。ここではコンソール上でパックマンが遊べるpacman4consoleをインストールしていきます。
以下のようなコマンドでインストールができます。

//cmd{
$ paru pacman4console
//}

パッケージ名が列挙されるのでインストールするパッケージを選びます。今回は一つだけ表示されていると思うので1を入力します。
レビューの表示を迫ってくるのでYを入力。レビューが表示されますがqキーを押すと退出できます。退出し、Accecpt changes?に了承すると、パッケージのビルドが始まります。

pacman4consoleはすぐにビルドが終わるはずです。
ビルド後pacmanでインストールするのでそのときパスワードを要求されます。
無事に最後までいけばインストール成功です。

pacman4consoleを起動してみましょう。

//cmd{
$ pacman4console
//}

//indepimage[pacman4console][コンソール上でpacmanが遊べます]

このようにコンソール上でパックマンのようなものが遊べます。
ちなみにKDE Applicationsの中には"Kapman"というこれまたパックマンもどきのゲームが用意されています。
みんなパックマン好きなのかな…。

pacman4consoleをアンインストールしてみます。

アンインストールはpacmanコマンドで行います。

//cmd{
$ sudo pacman -S pacman4console
//}

paruはあくまでAURのパッケージのビルドを助けるツールであり、
パッケージマネージャは一貫してpacmanです。

=== Webブラウザのインストール

日本語入力ができるようになったらWebブラウザをインストールしていきます。
ここでは人気のWebブラウザであるGoogle Chromeをインストールしましょう。
Google Chromeのようなオープンソース出ない部分を含むソフトは大抵AURに用意されています。
早速AURヘルパーを使ってインストールしましょう。

//cmd{
paru google-chrome
//}

インストールするパッケージは一番上のものを選びます

インストールが終わったらメニュー欄の「インターネット」にGoogle Chromeが追加されているはずです。

Google Chromeでfcitx5の日本語入力を使うには追加で設定が必要になります。

//indepimage[editapp][アプリケーションを編集]

Google Chromeを右クリックして「アプリケーションを編集」を選択します。
アプリケーション(A)を選択肢、引数に以下の文字列を追加します。

//emlist[引数を追加]{
--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime
//}

また、環境変数の欄に以下の変数を追加しておきます。

//emlist[環境変数を設定]{
QT_IM_MODULE=fcitx
//}

この状態でGoogle Chromeを起動すると日本語入力ができるようになります。
このようにKDE(Wayland)では各設定はグローバルではなくアプリケーションごとに行うことが望まれています。

環境、ビルドによってはGoogle Chromeの動作が不安定になる可能性があります。
現に私が使用している際にはフリーズがよく起こっていました。
そのような場合は別のブラウザを使いましょう。
ChromiumとはフリーでオープンソースなWebブラウザでGoogleにより開発、メンテナンスが進められています。
Google ChromeにはChromiumに機能を追加して作られています。
また、Microsoft EdgeやOpera、BraveなどのWebブラウザはChromiumを下に作られています。

Chromiumは公式リポジトリに含まれているためpacmanでインストールします。

//cmd{
$ sudo pacman -S chromium
//}

Chromiumで日本語入力を行う際もGoogle Chromeと同様の設定が必要になります。
使い勝手はGoogle Chromeと殆ど変わりません。
好きな方を使うのが良いと思います。

== …音が出ない？

plasmaをインストールした時点で音声入出力の設定は終わっているはずなので問題なく使えると思います。
しかし、機種によっては初期設定では音が出ない場合があるようです。
イヤホンを指して音が出るか確認してみてください。イヤホンからの出力は問題なく行われると思います。
本体から音を出したい際は@<b>{alsamixer}で音声チャンネルの設定を確認してみてください。
@<b>{alsa-utils}をインストールします。

//cmd{
$ sudo pacman -S alsa-utils
$ alsamixer
//}

するとこのようなUIが表示されます。

//indepimage[alsamixer][alsamixer Headphone欄がmuteになっている]

音が出ない場合、Headphone欄がミュート(MM)になっているのではないでしょうか
Headphoneにカーソルを合わせてmキーを押すとミュートが解除されます。
Headphoneチャンネルの音量を上げて再度試してみてください。

設定後

//cmd{
$ sudo alsactl store
//}

を実行すると設定が保存されます。

== GRUBメニューをオシャレに

起動メニュー、味気ないと思いませんか?

//indepimage[GRUB-before][味気ないGRUBメニュー]

実はGRUBメニューのテーマは自由に変えることができます。
grub2-themesをクローンします。

//cmd{
$ git clone https://github.com/vinceliuice/grub2-themes.git
//}

インストールのためのスクリプトが用意されているため、ありがたく使います。

//cmd{
$ sudo ./install.sh -b -t tela
//}

今回はTelaというテーマを採用しました。他にStylish、Vimix、WhiteSurというテーマが用意されています。
それぞれ、-tの引数をstylish、vimix、whitesurにするとテーマ変更できます。
設定が終わり試しに再起動してみると、このようにGRUBメニューがおしゃれになりました。

//indepimage[grub-after][オシャレなGRUB]

grub2-themesの他にもGNOME-LOOK.ORGでユーザが投稿しているテーマをインストールすることができます。
様々なテーマを使うことができるため、一目見てみることをお勧めします。

SDDMのテーマもいまいち味気ない感じがします。

//indepimage[start-sddm][]

これはKDEのテーマに合わせて統一感を出します。

システム設定にてsddmと検索するとログイン画面(SDDM)という設定が見つかります。
ここではPlasma設定を適用をしてみましょう。

//indepimage[sddm-setting][SDDM画面のセッティングをしましょう]

するとログイン画面とデスクトップ環境に統一感が出ます。











